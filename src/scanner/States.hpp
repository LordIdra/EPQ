#pragma once

#include "scanner/tokens.hpp"
#include <util/types.hpp>



const unordered_map<char, int> lowercaseTransitions {
    {'a', 99},
    {'b', 99},
    {'c', 99},
    {'d', 99},
    {'e', 99},
    {'f', 99},
    {'g', 99},
    {'h', 99},
    {'i', 99},
    {'j', 99},
    {'k', 99},
    {'l', 99},
    {'m', 99},
    {'n', 99},
    {'o', 99},
    {'p', 99},
    {'q', 99},
    {'r', 99},
    {'s', 99},
    {'t', 99},
    {'u', 99},
    {'v', 99},
    {'w', 99},
    {'x', 99},
    {'y', 99},
    {'z', 99},
    {'0', 99},
    {'1', 99},
    {'2', 99},
    {'3', 99},
    {'4', 99},
    {'5', 99},
    {'6', 99},
    {'7', 99},
    {'8', 99},
    {'9', 99},
};

static auto Transition_LowercaseAZorNumber(const char character, int state) -> unordered_map<char, int> {
    unordered_map<char, int> m = lowercaseTransitions;
    m.at(character) = state;
    return m;
}

static auto Transition_LowercaseAZorNumber(const std::unordered_map<char, int> &characterToStateMap) -> unordered_map<char, int> {
    unordered_map<char, int> m = lowercaseTransitions;
    for (auto pair : characterToStateMap) {
        m.at(pair.first) = pair.second;
    }
    return m;
}

const vector<unordered_map<char, int>> transitions {
    {
        {' ', 1},
        {'\n', 1},
        {'#', 108},
        {',', 2},
        {'.', 3},
        {':', 4},
        {';', 5},
        {'[', 6},
        {']', 7},
        {'(', 8},
        {')', 9},
        {'{', 15},
        {'}', 17},
        {'=', 10},
        {'+', 12},
        {'-', 14},
        {'0', 22},
        {'1', 22},
        {'2', 22},
        {'3', 22},
        {'4', 22},
        {'5', 22},
        {'6', 22},
        {'7', 22},
        {'8', 22},
        {'9', 22},
        {'*', 23},
        {'/', 25},
        {'%', 27},
        {'!', 29},
        {'>', 31},
        {'<', 33},
        {'_', 99},
        {'a', 35},
        {'b', 38},
        {'c', 46},
        {'d', 99},
        {'e', 56},
        {'f', 60},
        {'g', 99},
        {'h', 99},
        {'i', 67},
        {'j', 99},
        {'k', 99},
        {'l', 99},
        {'m', 99},
        {'n', 79},
        {'o', 82},
        {'p', 99},
        {'q', 99},
        {'r', 84},
        {'s', 99},
        {'t', 90},
        {'u', 99},
        {'v', 99},
        {'w', 94},
        {'x', 99},
        {'y', 99},
        {'z', 99},
        {'A', 99},
        {'B', 99},
        {'C', 99},
        {'D', 99},
        {'E', 99},
        {'F', 99},
        {'G', 99},
        {'H', 99},
        {'I', 99},
        {'J', 99},
        {'K', 99},
        {'L', 99},
        {'M', 99},
        {'N', 99},
        {'O', 99},
        {'P', 99},
        {'Q', 99},
        {'R', 99},
        {'S', 99},
        {'T', 99},
        {'U', 99},
        {'V', 99},
        {'W', 99},
        {'X', 99},
        {'Y', 99},
        {'Z', 99}}, 
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {
        {'=', 11},
        {'>', 106},
        {'<', 107}},
    {},
    {{'=', 13}},
    {},
    {
        {'=', 16},
        {'>', 18},
        {'0', 22},
        {'1', 22},
        {'2', 22},
        {'3', 22},
        {'4', 22},
        {'5', 22},
        {'6', 22},
        {'7', 22},
        {'8', 22},
        {'9', 22}},
    {},
    {},
    {},
    {},
    Transition_LowercaseAZorNumber('t', 21),
    {},
    Transition_LowercaseAZorNumber('p', 100),
    {
        {'0', 22},
        {'1', 22},
        {'2', 22},
        {'3', 22},
        {'4', 22},
        {'5', 22},
        {'6', 22},
        {'7', 22},
        {'8', 22},
        {'9', 22}},
    {{'=', 24}},
    {},
    {{'=', 26}},
    {},
    {{'=', 28}},
    {},
    {},
    {},
    {{'=', 32}},
    {},
    {
        {'=', 34},
        {'-', 20}},
    {},
    Transition_LowercaseAZorNumber('n', 36),
    Transition_LowercaseAZorNumber('d', 37),
    lowercaseTransitions,
    Transition_LowercaseAZorNumber(unordered_map<char, int> {
        {'o', 39},
        {'r', 42}}),
    Transition_LowercaseAZorNumber('o', 40),
    Transition_LowercaseAZorNumber('l', 41),
    lowercaseTransitions,
    Transition_LowercaseAZorNumber('e', 43),
    Transition_LowercaseAZorNumber('a', 44),
    Transition_LowercaseAZorNumber('k', 45),
    lowercaseTransitions,
    Transition_LowercaseAZorNumber('o', 47),
    Transition_LowercaseAZorNumber('n', 48),
    Transition_LowercaseAZorNumber(unordered_map<char, int> {
        {'t', 49},
        {'s', 54}}),
    Transition_LowercaseAZorNumber('i', 50),
    Transition_LowercaseAZorNumber('n', 51),
    Transition_LowercaseAZorNumber('u', 52),
    Transition_LowercaseAZorNumber('e', 53),
    lowercaseTransitions,
    Transition_LowercaseAZorNumber('t', 55),
    lowercaseTransitions,
    Transition_LowercaseAZorNumber('l', 57),
    Transition_LowercaseAZorNumber('s', 58),
    Transition_LowercaseAZorNumber('e', 59),
    lowercaseTransitions,
    Transition_LowercaseAZorNumber(unordered_map<char, int> {
        {'o', 61},
        {'a', 63}}),
    Transition_LowercaseAZorNumber('r', 62),
    lowercaseTransitions,
    Transition_LowercaseAZorNumber('l', 64),
    Transition_LowercaseAZorNumber('s', 65),
    Transition_LowercaseAZorNumber('e', 66),
    lowercaseTransitions,
    Transition_LowercaseAZorNumber(unordered_map<char, int> {
        {'n', 68},
        {'f', 78}}),
    Transition_LowercaseAZorNumber(unordered_map<char, int> {
        {'t', 69},
        {'p', 103}}),
    Transition_LowercaseAZorNumber(unordered_map<char, int> {
        {'4', 70},
        {'8', 71},
        {'1', 72},
        {'3', 74},
        {'6', 76}}),
    lowercaseTransitions,
    lowercaseTransitions,
    Transition_LowercaseAZorNumber('6', 73),
    lowercaseTransitions,
    Transition_LowercaseAZorNumber('2', 75),
    lowercaseTransitions,
    Transition_LowercaseAZorNumber('4', 77),
    lowercaseTransitions,
    lowercaseTransitions,
    Transition_LowercaseAZorNumber('o', 80),
    Transition_LowercaseAZorNumber('t', 81),
    lowercaseTransitions,
    Transition_LowercaseAZorNumber(unordered_map<char, int> {
        {'r', 83},
        {'u', 19}}),
    lowercaseTransitions,
    Transition_LowercaseAZorNumber('e', 85),
    Transition_LowercaseAZorNumber('t', 86),
    Transition_LowercaseAZorNumber('u', 87),
    Transition_LowercaseAZorNumber('r', 88),
    Transition_LowercaseAZorNumber('n', 89),
    lowercaseTransitions,
    Transition_LowercaseAZorNumber('r', 91),
    Transition_LowercaseAZorNumber('u', 92),
    Transition_LowercaseAZorNumber('e', 93),
    lowercaseTransitions,
    Transition_LowercaseAZorNumber('h', 95),
    Transition_LowercaseAZorNumber('i', 96),
    Transition_LowercaseAZorNumber('l', 97),
    Transition_LowercaseAZorNumber('e', 98),
    lowercaseTransitions,
    {
        {'_', 99},
        {'a', 99},
        {'b', 99},
        {'c', 99},
        {'d', 99},
        {'e', 99},
        {'f', 99},
        {'g', 99},
        {'h', 99},
        {'i', 99},
        {'j', 99},
        {'k', 99},
        {'l', 99},
        {'m', 99},
        {'n', 99},
        {'o', 99},
        {'p', 99},
        {'q', 99},
        {'r', 99},
        {'s', 99},
        {'t', 99},
        {'u', 99},
        {'v', 99},
        {'w', 99},
        {'x', 99},
        {'y', 99},
        {'z', 99},
        {'A', 99},
        {'B', 99},
        {'C', 99},
        {'D', 99},
        {'E', 99},
        {'F', 99},
        {'G', 99},
        {'H', 99},
        {'I', 99},
        {'J', 99},
        {'K', 99},
        {'L', 99},
        {'M', 99},
        {'N', 99},
        {'O', 99},
        {'P', 99},
        {'Q', 99},
        {'R', 99},
        {'S', 99},
        {'T', 99},
        {'U', 99},
        {'V', 99},
        {'W', 99},
        {'X', 99},
        {'Y', 99},
        {'Z', 99},
        {'0', 99},
        {'1', 99},
        {'2', 99},
        {'3', 99},
        {'4', 99},
        {'5', 99},
        {'6', 99},
        {'7', 99},
        {'8', 99},
        {'9', 99}
    },
    Transition_LowercaseAZorNumber('u', 101),
    Transition_LowercaseAZorNumber('t', 102),
    lowercaseTransitions,
    Transition_LowercaseAZorNumber('u', 104),
    Transition_LowercaseAZorNumber('t', 105),
    lowercaseTransitions,
    {},
    {},
    {}
};

const vector<TokenType> finalStates {
    NONE,
    NO_TOKEN,
    COMMA,
    DOT,
    COLON,
    SEMICOLON,
    OPEN_SQUARE_BRACKET,
    CLOSE_SQUARE_BRACKET,
    OPEN_PARENTHESIS,
    CLOSE_PARENTHESIS,
    ASSIGN,
    EQUALS,
    ADD,
    ADD_ASSIGN,
    SUBTRACT,
    OPEN_BRACE,
    SUBTRACT_ASSIGN,
    CLOSE_BRACE,
    REFERENCE,
    IDENTIFIER,
    DEREFERENCE,
    IDENTIFIER,
    NUMBER,
    MULTIPLY,
    MULTIPLY_ASSIGN,
    DIVIDE,
    DIVIDE_ASSIGN,
    MODULUS,
    MODULUS_ASSIGN,
    IDENTIFIER,
    IDENTIFIER,
    GREATER,
    GREATER_OR_EQUAL,
    LESS,
    LESS_OR_EQUAL,
    IDENTIFIER,
    IDENTIFIER,
    AND,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    BOOL,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    BREAK,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    CONTINUE,
    IDENTIFIER,
    CONST,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    ELSE,
    IDENTIFIER,
    IDENTIFIER,
    FOR,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    FALSE,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    INT4,
    INT8,
    IDENTIFIER,
    INT16,
    IDENTIFIER,
    INT32,
    IDENTIFIER,
    INT64,
    IF,
    IDENTIFIER,
    IDENTIFIER,
    NOT,
    IDENTIFIER,
    OR,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    RETURN,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    TRUE,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    WHILE,
    IDENTIFIER,
    IDENTIFIER,
    IDENTIFIER,
    OUTPUT,
    IDENTIFIER,
    IDENTIFIER,
    INPUT,
    GREATER_OR_EQUAL,
    LESS_OR_EQUAL,
    NONE
};