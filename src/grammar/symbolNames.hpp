#pragma once

#include "grammar/nonTerminals.hpp"
#include "grammar/terminals.hpp"
#include <util/types.hpp>



const unordered_map<int, string> symbolNames {
    {NONE, "NONE"},
    {NEWLINE, "NEWLINE"},
    {NO_TOKEN, "NO_TOKEN"},
    {COMMENT, "COMMENT"},
    {COMMA, "COMMA"},
    {DOT, "DOT"},
    {COLON, "COLON"},
    {SEMICOLON, "SEMICOLON"},
    {OPEN_SQUARE_BRACKET, "OPEN_SQUARE_BRACKET"},
    {CLOSE_SQUARE_BRACKET, "CLOSE_SQUARE_BRACKET"},
    {OPEN_PARENTHESIS, "OPEN_PARENTHESIS"},
    {CLOSE_PARENTHESIS, "CLOSE_PARENTHESIS"},
    {OPEN_BRACE, "OPEN_BRACE"},
    {CLOSE_BRACE, "CLOSE_BRACE"},
    {ASSIGN, "ASSIGN"},
    {EQUALS, "EQUALS"},
    {NOT_EQUALS, "NOT_EQUALS"},
    {GREATER, "GREATER"},
    {GREATER_OR_EQUAL, "GREATER_OR_EQUAL"},
    {LESS, "LESS"},
    {LESS_OR_EQUAL, "LESS_OR_EQUAL"},
    {INCREMENT, "INCREMENT"},
    {DECREMENT, "DECREMENT"},
    {ADD, "ADD"},
    {ADD_ASSIGN, "ADD_ASSIGN"},
    {SUBTRACT, "SUBTRACT"},
    {SUBTRACT_ASSIGN, "SUBTRACT_ASSIGN"},
    {MULTIPLY, "MULTIPLY"},
    {MULTIPLY_ASSIGN, "MULTIPLY_ASSIGN"},
    {DIVIDE, "DIVIDE"},
    {DIVIDE_ASSIGN, "DIVIDE_ASSIGN"},
    {MODULUS, "MODULUS"},
    {MODULUS_ASSIGN, "MODULUS_ASSIGN"},
    {REFERENCE, "REFERENCE"},
    {DEREFERENCE, "DEREFERENCE"},
    {IDENTIFIER, "IDENTIFIER"},
    {TRUE, "TRUE"},
    {FALSE, "FALSE"},
    {NUMBER, "NUMBER"},
    {VOID, "VOID"},
    {INT4, "INT4"},
    {INT8, "INT8"},
    {INT12, "INT12"},
    {INT16, "INT16"},
    {INT32, "INT32"},
    {INT64, "INT64"},
    {NOT, "NOT"},
    {OR, "OR"},
    {AND, "AND"},
    {IF, "IF"},
    {ELSE, "ELSE"},
    {ELSEIF, "ELSEIF"},
    {FOR, "FOR"},
    {WHILE, "WHILE"},
    {CONTINUE, "CONTINUE"},
    {BREAK, "BREAK"},
    {RETURN, "RETURN"},
    {OUTPUT, "OUTPUT"},
    {INPUT, "INPUT"},
    {CALL, "CALL"},
    {Term_AND, "Term_AND"},
    {Term_OR, "Term_OR"},
    {Term_NOT_EQUALS, "Term_EQUALS"},
    {Term_EQUALS, "Term_EQUALS"},
    {Term_GREATER, "Term_GREATER"},
    {Term_GREATER_OR_EQUAL, "Term_GREATER_OR_EQUAL"},
    {Term_LESS, "Term_LESS"},
    {Term_LESS_OR_EQUAL, "Term_LESS_OR_EQUAL"},
    {Term_SUB, "Term_SUB"},
    {Term_ADD, "Term_ADD"},
    {Term_MULTIPLY, "Term_MULTIPLY"},
    {Term_DIVIDE, "Term_DIVIDE"},
    {Term_MODULUS, "Term_MODULUS"},
    {Term, "Term"},
    {Term_0, "Term_0"},
    {Term_1, "Term_1"},
    {Term_2, "Term_2"},
    {Term_3, "Term_3"},
    {Term_4, "Term_4"},
    {Term_5, "Term_5"},
    {Term_6, "Term_6"},
    {Term_7, "Term_7"},
    {Term_8, "Term_8"},
    {Term_9, "Term_9"},
    {Term_10, "Term_10"},
    {Term_11, "Term_11"},
    {Term_12, "Term_12"},
    {Term_13, "Term_13"},
    {Term_14, "Term_14"},
    {Datatype, "Datatype"},
    {VoidableDatatype, "VoidableDatatype"},
    {Reference, "Reference"},
    {Dereference, "Dereference"},
    {ListIndex, "IdentifierOperation"},
    {Value, "Value"},
    {Variable, "Variable"},
    {IdentifierSuffix, "IdentifierSuffix"},
    {Literal, "Literal"},
    {InputTerm, "InputTerm"},
    {AssignmentOperation, "AssignmentOperation"},
    {Assignment, "Assignment"},
    {Declaration_0, "Declaration_0"},
    {Declaration, "Declaration"},
    {SimpleStatement, "SimpleStatement"},
    {LoopCondition, "LoopCondition"},
    {ForSequence, "ForSequence"},
    {For, "For"},
    {While, "While"},
    {If, "If"},
    {ElseIf, "ElseIf"},
    {Else, "Else"},
    {N_If, "N_If"},
    {N_ElseIf, "N_ElseIf"},
    {N_Else, "N_Else"},
    {N_ElseIfBlock, "N_ElseIfBlock"},
    {N_IfBlock, "N_IfBlock"},
    {L_If, "L_If"},
    {L_ElseIf, "L_ElseIf"},
    {L_Else, "L_Else"},
    {L_ElseIfBlock, "L_ElseIfBlock"},
    {L_IfBlock, "L_IfBlock"},
    {Parameter, "Parameter"},
    {NextParameter, "NextParameter"},
    {ParameterList_0, "ParameterList_0"},
    {ParameterList_1, "ParameterList_1"},
    {FunctionDeclaration, "FunctionDeclaration"},
    {Argument, "Argument"},
    {ArgumentList_0, "ArgumentList_0"},
    {ArgumentList_1, "ArgumentList_1"},
    {FunctionCall, "FunctionCall"},
    {ReturnContents, "Return"},
    {N_Block_0, "N_Block_0"},
    {N_Block, "N_Block"},
    {L_Block_0, "L_Block_0"},
    {L_Block, "L_Block"},
    {Program, "Program"}};